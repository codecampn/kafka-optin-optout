/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * Database Info Service
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  SinkDatabase,
  Error,
  CustomerConsents,
  InvokeGrantConsentBody,
  InvokeRevokeConsentBody,
} from './model';

/**
 * @summary Get customer consents
 */
export const getSinkDatabase = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SinkDatabase>> => {
  return axios.get(`/api/database`, options);
};

export const getGetSinkDatabaseQueryKey = () => [`/api/database`];

export type GetSinkDatabaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSinkDatabase>>
>;
export type GetSinkDatabaseQueryError = AxiosError<Error>;

export const useGetSinkDatabase = <
  TData = Awaited<ReturnType<typeof getSinkDatabase>>,
  TError = AxiosError<Error>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSinkDatabase>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSinkDatabaseQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSinkDatabase>>> = ({
    signal,
  }) => getSinkDatabase({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getSinkDatabase>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get all Customer Consents
 */
export const getAggregate = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomerConsents>> => {
  return axios.get(`/api/ktable`, options);
};

export const getGetAggregateQueryKey = () => [`/api/ktable`];

export type GetAggregateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAggregate>>
>;
export type GetAggregateQueryError = AxiosError<Error>;

export const useGetAggregate = <
  TData = Awaited<ReturnType<typeof getAggregate>>,
  TError = AxiosError<Error>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAggregate>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAggregateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAggregate>>> = ({
    signal,
  }) => getAggregate({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getAggregate>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Give consent for advertisment in the given channel
 */
export const invokeGrantConsent = (
  invokeGrantConsentBody: InvokeGrantConsentBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`/api/grant-consent`, invokeGrantConsentBody, options);
};

export type InvokeGrantConsentMutationResult = NonNullable<
  Awaited<ReturnType<typeof invokeGrantConsent>>
>;
export type InvokeGrantConsentMutationBody = InvokeGrantConsentBody;
export type InvokeGrantConsentMutationError = AxiosError<Error>;

export const useInvokeGrantConsent = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invokeGrantConsent>>,
    TError,
    { data: InvokeGrantConsentBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invokeGrantConsent>>,
    { data: InvokeGrantConsentBody }
  > = (props) => {
    const { data } = props ?? {};

    return invokeGrantConsent(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof invokeGrantConsent>>,
    TError,
    { data: InvokeGrantConsentBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Give consent for advertisment in the given channel
 */
export const invokeRevokeConsent = (
  invokeRevokeConsentBody: InvokeRevokeConsentBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.post(`/api/revoke-consent`, invokeRevokeConsentBody, options);
};

export type InvokeRevokeConsentMutationResult = NonNullable<
  Awaited<ReturnType<typeof invokeRevokeConsent>>
>;
export type InvokeRevokeConsentMutationBody = InvokeRevokeConsentBody;
export type InvokeRevokeConsentMutationError = AxiosError<Error>;

export const useInvokeRevokeConsent = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof invokeRevokeConsent>>,
    TError,
    { data: InvokeRevokeConsentBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof invokeRevokeConsent>>,
    { data: InvokeRevokeConsentBody }
  > = (props) => {
    const { data } = props ?? {};

    return invokeRevokeConsent(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof invokeRevokeConsent>>,
    TError,
    { data: InvokeRevokeConsentBody },
    TContext
  >(mutationFn, mutationOptions);
};
